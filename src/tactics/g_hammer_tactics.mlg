DECLARE PLUGIN "hammer_tactics"

{
open Ltac_plugin
open Stdarg
open Tacarg
open Hammer_lib
open Hammer_errors
open Sauto
open Tacopts
open Tactics_main

open Proofview.Notations
}

(*****************************************************************************)
(* Argument parsing *)

ARGUMENT EXTEND sauto_bopt
| [ "on" ] -> { true }
| [ "off" ] -> { false }
END

ARGUMENT EXTEND sauto_opts
| [ ] -> { [SONop] }
END

(*****************************************************************************)
(* Tactics *)

TACTIC EXTEND Hammer_simple_splitting
| [ "simple_splitting" ] -> { simple_splitting
                                { (default_s_opts ()) with
                                  s_simple_splits = SAll } }
| [ "simple_splitting" "logic" ] -> { simple_splitting (default_s_opts ()) }
END

TACTIC EXTEND Hammer_eager_inverting
| [ "eager_inverting" ] -> { eager_inverting (default_s_opts ()) }
| [ "eager_inverting_dep" ] -> { eager_inverting
                                   { (default_s_opts ()) with
                                     s_dep = true } }
END

TACTIC EXTEND Hammer_sunfolding
| [ "sunfolding" ] -> { sunfolding true }
| [ "sunfolding" "weak" ] -> { sunfolding false }
END

TACTIC EXTEND Hammer_srun
| [ "srun" tactic4(tac) sauto_opts(l) ] -> {
  try_usolve (default_s_opts ()) l
    (fun opts -> sinit opts <*>
                   Tacticals.New.tclSOLVE [ Hhutils.tacinterp tac ])
    "srun failed"
}
END

TACTIC EXTEND Hammer_scongruence
| [ "scongruence" sauto_opts(l) ] -> {
  try_usolve (default_s_opts ()) l scongruence "scongruence failed"
}
END

TACTIC EXTEND Hammer_sfirstorder
| [ "sfirstorder" sauto_opts(l) ] -> {
  try_usolve (default_s_opts ()) l sfirstorder "sfirstorder failed"
}
END

TACTIC EXTEND Hammer_strivial
| [ "strivial" sauto_opts(l) ] -> {
  try_usolve (default_s_opts ()) l strivial "strivial failed"
}
END

TACTIC EXTEND Hammer_sauto
| [ "sauto" sauto_opts(l) ] -> {
  try_usolve (default_s_opts ()) l sauto "sauto failed"
}
END

TACTIC EXTEND Hammer_hauto
| [ "hauto" sauto_opts(l) ] -> {
  try_usolve (hauto_s_opts ()) l sauto "hauto failed"
}
END

TACTIC EXTEND Hammer_qauto
| [ "qauto" sauto_opts(l) ] -> {
  try_usolve (qauto_s_opts ()) l sauto "qauto failed"
}
END

TACTIC EXTEND Hammer_cauto
| [ "cauto" sauto_opts(l) ] -> {
  let opts =
    { (default_s_opts ()) with s_forwarding = false }
  in
  try_usolve opts l sauto "cauto failed"
}
END

TACTIC EXTEND Hammer_ssimpl
| [ "ssimpl" sauto_opts(l) ] -> {
  try_usolve (default_s_opts ()) l ssimpl "ssimpl failed"
}
END

TACTIC EXTEND Hammer_csimpl
| [ "csimpl" sauto_opts(l) ] -> {
  let opts =
    { (default_s_opts ()) with s_forwarding = false }
  in
  try_usolve opts l ssimpl "csimpl failed"
}
END

TACTIC EXTEND Hammer_qsimpl
| [ "qsimpl" sauto_opts(l) ] -> {
  try_usolve (default_s_opts ()) l qsimpl "qsimpl failed"
}
END

TACTIC EXTEND Hammer_sintuition
| [ "sintuition" sauto_opts(l) ] -> {
  try_usolve (default_s_opts ()) l sintuition "sintuition failed"
}
END

TACTIC EXTEND Hammer_scrush
| [ "scrush" sauto_opts(l) ] -> {
  try_usolve (default_s_opts ()) l scrush "scrush failed"
}
END

TACTIC EXTEND Hammer_hcrush
| [ "hcrush" sauto_opts(l) ] -> {
  try_usolve (hauto_s_opts ()) l scrush "hcrush failed"
}
END

TACTIC EXTEND Hammer_qcrush
| [ "qcrush" sauto_opts(l) ] -> {
  try_usolve (qauto_s_opts ()) l scrush "qcrush failed"
}
END

TACTIC EXTEND Hammer_fcrush
| [ "fcrush" sauto_opts(l) ] -> {
  try_usolve (default_s_opts ()) l fcrush "fcrush failed"
}
END

TACTIC EXTEND Hammer_hfcrush
| [ "hfcrush" sauto_opts(l) ] -> {
  try_usolve (hauto_s_opts ()) l fcrush "hfcrush failed"
}
END

TACTIC EXTEND Hammer_qfcrush
| [ "qfcrush" sauto_opts(l) ] -> {
  try_usolve (qauto_s_opts ()) l fcrush "qfcrush failed"
}
END

TACTIC EXTEND Hammer_ecrush
| [ "ecrush" sauto_opts(l) ] -> {
  try_usolve (default_s_opts ()) l ecrush "ecrush failed"
}
END

TACTIC EXTEND Hammer_hecrush
| [ "hecrush" sauto_opts(l) ] -> {
  try_usolve (hauto_s_opts ()) l ecrush "hecrush failed"
}
END

TACTIC EXTEND Hammer_qecrush
| [ "qecrush" sauto_opts(l) ] -> {
  try_usolve (qauto_s_opts ()) l ecrush "qecrush failed"
}
END

TACTIC EXTEND Hammer_sblast
| [ "sblast" sauto_opts(l) ] -> {
  try_usolve (default_s_opts ()) l sblast "sblast failed"
}
END

TACTIC EXTEND Hammer_qblast
| [ "qblast" sauto_opts(l) ] -> {
  try_usolve (default_s_opts ()) l qblast "qblast failed"
}
END

TACTIC EXTEND Hammer_sauto_actions
| [ "sauto_actions" sauto_opts(l) ] -> {
  try_tactic (fun () -> interp_opts (default_s_opts ()) l print_actions)
}
END

TACTIC EXTEND Hammer_use
| [ "use" ne_constr_list_sep(l, ",") ] -> {
  try_tactic (fun () -> use_lemmas l)
}
END

TACTIC EXTEND Hammer_sauto_hbest
| [ "hbest" sauto_opts(l) ] -> {
  Tacbest.find_best_tactic (Tacbest.hbest_tactics l) l "hbest"
}
END

TACTIC EXTEND Hammer_sauto_sbest
| [ "sbest" sauto_opts(l) ] -> {
  Tacbest.find_best_tactic (Tacbest.sbest_tactics l) l "sbest"
}
END

TACTIC EXTEND Hammer_sauto_best
| [ "best" sauto_opts(l) ] -> {
  Tacbest.find_best_tactic (Tacbest.best_tactics l) l "best"
}
END
