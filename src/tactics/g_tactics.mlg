DECLARE PLUGIN "hammer_tactics"

{
open Pcoq.Prim
open Ltac_plugin
open Stdarg
open Tacarg
open Names
open Sauto
open Tactics_main

module Utils = Hhutils
}

TACTIC EXTEND Hammer_simple_splitting
| [ "simple_splitting" ] -> { simple_splitting default_s_opts }
END

TACTIC EXTEND Hammer_eager_inverting
| [ "eager_inverting" ] -> { eager_inverting default_s_opts }
END

TACTIC EXTEND Hammer_sunfold
| [ "sunfold" constr(c) ] -> { sunfold true (to_const c) }
| [ "sunfold" "weak" constr(c) ] -> { sunfold false (to_const c) }
END

TACTIC EXTEND Hammer_sunfolding
| [ "sunfolding" ] -> { sunfolding true }
| [ "sunfolding" "weak" ] -> { sunfolding false }
END

TACTIC EXTEND Hammer_ssimpl_gen
| [ "ssimpl" ] -> {
  ssimpl { default_s_opts with s_simpl_tac = Utils.ltac_apply "Tactics.ssolve" [] }
}
| [ "ssimpl" "unfolding" constr(unfolds) ] -> {
  let opts = get_s_opts [] None (Some unfolds) None None None in
  ssimpl { opts with s_simpl_tac = Utils.ltac_apply "Tactics.ssolve" [] }
}
| [ "ssimpl" "inverting" constr(inverts) ] -> {
  let opts = get_s_opts [] None None (Some inverts) None None in
  ssimpl { opts with s_simpl_tac = Utils.ltac_apply "Tactics.ssolve" [] }
}
| [ "ssimpl" "unfolding" constr(unfolds) "inverting" constr(inverts) ] -> {
  let opts = get_s_opts [] None (Some unfolds) (Some inverts) None None in
  ssimpl { opts with s_simpl_tac = Utils.ltac_apply "Tactics.ssolve" [] }
}
| [ "ssimpl" "with" tactic3(tac) ] -> {
  let itac = Tacinterp.tactic_of_value (Tacinterp.default_ist ()) tac in
  ssimpl { default_s_opts with s_simpl_tac = itac }
}
| [ "ssimpl" "with" tactic3(tac) "unfolding" constr(unfolds) ] -> {
  let opts = get_s_opts [] None (Some unfolds) None None None in
  let itac = Tacinterp.tactic_of_value (Tacinterp.default_ist ()) tac in
  ssimpl { opts with s_simpl_tac = itac }
}
| [ "ssimpl" "with" tactic3(tac) "inverting" constr(inverts) ] -> {
  let opts = get_s_opts [] None None (Some inverts) None None in
  let itac = Tacinterp.tactic_of_value (Tacinterp.default_ist ()) tac in
  ssimpl { opts with s_simpl_tac = itac }
}
| [ "ssimpl" "with" tactic3(tac) "unfolding" constr(unfolds) "inverting" constr(inverts) ] -> {
  let opts = get_s_opts [] None (Some unfolds) (Some inverts) None None in
  let itac = Tacinterp.tactic_of_value (Tacinterp.default_ist ()) tac in
  ssimpl { opts with s_simpl_tac = itac }
}
END

TACTIC EXTEND Hammer_qsimpl_gen
| [ "qsimpl" ] -> {
  qsimpl { default_s_opts with s_simpl_tac = Utils.ltac_apply "Tactics.ssolve" [];
    s_bnat_reflect = false }
}
| [ "qsimpl" "unfolding" constr(unfolds) ] -> {
  let opts = get_s_opts [] None (Some unfolds) None None None in
  qsimpl { opts with s_simpl_tac = Utils.ltac_apply "Tactics.ssolve" [];
    s_bnat_reflect = false }
}
| [ "qsimpl" "inverting" constr(inverts) ] -> {
  let opts = get_s_opts [] None None (Some inverts) None None in
  qsimpl { opts with s_simpl_tac = Utils.ltac_apply "Tactics.ssolve" [];
    s_bnat_reflect = false }
}
| [ "qsimpl" "unfolding" constr(unfolds) "inverting" constr(inverts) ] -> {
  let opts = get_s_opts [] None (Some unfolds) (Some inverts) None None in
  qsimpl { opts with s_simpl_tac = Utils.ltac_apply "Tactics.ssolve" [];
    s_bnat_reflect = false }
}
| [ "qsimpl" "with" tactic3(tac) ] -> {
  let itac = Tacinterp.tactic_of_value (Tacinterp.default_ist ()) tac in
  qsimpl { default_s_opts with s_simpl_tac = itac; s_bnat_reflect = false }
}
| [ "qsimpl" "with" tactic3(tac) "unfolding" constr(unfolds) ] -> {
  let opts = get_s_opts [] None (Some unfolds) None None None in
  let itac = Tacinterp.tactic_of_value (Tacinterp.default_ist ()) tac in
  qsimpl { opts with s_simpl_tac = itac; s_bnat_reflect = false }
}
| [ "qsimpl" "with" tactic3(tac) "inverting" constr(inverts) ] -> {
  let opts = get_s_opts [] None None (Some inverts) None None in
  let itac = Tacinterp.tactic_of_value (Tacinterp.default_ist ()) tac in
  qsimpl { opts with s_simpl_tac = itac; s_bnat_reflect = false }
}
| [ "qsimpl" "with" tactic3(tac)  "unfolding" constr(unfolds) "inverting" constr(inverts) ] -> {
  let opts = get_s_opts [] None (Some unfolds) (Some inverts) None None in
  let itac = Tacinterp.tactic_of_value (Tacinterp.default_ist ()) tac in
  qsimpl { opts with s_simpl_tac = itac; s_bnat_reflect = false }
}
END

TACTIC EXTEND Hammer_sintuition_gen
| [ "sintuition" ] -> {
  sintuition { default_s_opts with s_simpl_tac = Utils.ltac_apply "Tactics.ssolve" [] }
}
| [ "sintuition" "with" tactic3(tac) ] -> {
  let itac = Tacinterp.tactic_of_value (Tacinterp.default_ist ()) tac in
  sintuition { default_s_opts with s_simpl_tac = itac }
}
END

TACTIC EXTEND Hammer_sauto_gen
| [ "sauto_gen" int_or_var_opt(n) ] -> { sauto default_s_opts
                                           (get_opt n
                                              (if default_s_opts.s_depth_cost_model then
                                                  default_sauto_depth_limit
                                               else
                                                  default_sauto_tree_limit)) }
| [ "sauto_gen" int_or_var_opt(n) "with" "(" ne_preident_list(bases) ")" "unfolding" constr(unfoldings)
      "inverting" constr(inverting) "splitting" constr(splits)
      "ctrs" constr(ctrs) "opts" ne_preident_list(ropts) ] -> {
  let opts = get_s_opts ropts (Some bases) (Some unfoldings) (Some inverting) (Some splits) (Some ctrs) in
  sauto opts
  (get_opt n
     (if opts.s_depth_cost_model then
         default_sauto_depth_limit
      else
         default_sauto_tree_limit))
}
END

TACTIC EXTEND Hammer_sauto_actions
| [ "sauto_actions" ] -> {
  print_actions default_s_opts
}
END

VERNAC COMMAND EXTEND Hammer_shint_unfold CLASSIFIED AS SIDEFF
| [ "Tactics" "Hint" "Unfold" ident(id) ] -> {
  add_unfold_hint (Utils.get_const (Id.to_string id))
}
END

VERNAC COMMAND EXTEND Hammer_shint_constructors CLASSIFIED AS SIDEFF
| [ "Tactics" "Hint" "Constructors" ident(id) ] -> {
  add_ctrs_hint (Utils.get_inductive (Id.to_string id))
}
END

VERNAC COMMAND EXTEND Hammer_shint_rewrite CLASSIFIED AS SIDEFF
| [ "Tactics" "Hint" "Inversion" ident(id) ] -> {
  add_inversion_hint (Utils.get_inductive (Id.to_string id))
}
END

(* Example ARGUMENT EXTEND. *)

(* TODO: write proper tactic argument parsing for "sauto" using
   ARGUMENT EXTEND. *)

ARGUMENT EXTEND myarg TYPED AS string
| [ "A" ] -> { "aa" }
| [ "B" ] -> { "bb" }
END

{
let pr_mlname _ _ _ _ = Pp.pr_comma ()
}

ARGUMENT EXTEND mlname TYPED AS string PRINTED BY { pr_mlname }
| [ preident(id) ] -> { id }
| [ string(s) ] -> { s }
END
